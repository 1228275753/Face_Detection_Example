开头,防止中文乱码:
# -*- coding: utf-8 -*-
1. 引入:
	import cv2 as cv

2. 获取图片:
	img = cv.imread('图片路径/图片名.png')

3. 读取视频:
	cap = cv.VideoCapture("视频路径/视频名.mp4")

4. 获取摄像头视频:
	cap = cv.VideoCapture(0)

5. 显示每一帧图像:
	cv.imshow('window',frame)

6. 输出图像:
	cv.imwrite("testImg1.jpg",frame)

7. 输出视频:
	videoWrite.write(frame)

8. 在该帧率下,按q退出:
	if cv.waitKey(1) & 0xFF == ord('q'):
        	break

9. 释放摄像头,关闭所有窗口
	cap.release()
	cv.destroyAllWindows()

10. 转灰度图:
	gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

10-1. 转hsv:
	hsv=cv.cvtColor(frame,cv.COLOR_BGR2HSV)
10-2. 绿幕方法:
	#获取mask,mask1将绿屏(取值范围内的值)变为白色
	mask1 = cv.inRange(hsv,lower_green,upper_green)
	#腐蚀膨胀,erode和dilate步骤为完善润滑mask1
	mask1=cv.erode(mask1,None,iterations=1)
	mask1=cv.dilate(mask1,None,iterations=1)
	# 反转mask1,mask2将绿屏变为黑色
	mask2 = cv.bitwise_not(mask1)
	# 生成最终输出
	# res1,将绿屏变为背景,其余全是黑色(即用img_back填充白色区域)
	res1 = cv.bitwise_and(img_back,img_back,mask=mask1)
	# res2,将绿屏变为黑色,其余全是正常(即用img填充白色区域)
	res2 = cv.bitwise_and(frame,frame,mask=mask2)
	frameBg = cv.addWeighted(res1,1,res2,1,0)

11. 改变图片大小:
	img = cv.resize(img,(1280,1000))

12. 改变视频分辨率
	cap.set(cv.CAP_PROP_FRAME_WIDTH, 1280)
	cap.set(cv.CAP_PROP_FRAME_HEIGHT, 720)

13. 全局变量:
	global faceNum

14. 获取当前文件路径,并与同级目录人脸xml文件拼接,获取该文件地址:
	def load_file():
		# 获取当前文件路径
		current_path = os.path.abspath(__file__)
		# 获取当前文件的父目录
		father_path = os.path.abspath(os.path.dirname(current_path) + os.path.sep + ".")
		# config.ini文件路径,获取当前目录的父目录的父目录与congig.ini拼接
		global config_file_path
		config_file_path=father_path + '/haarcascade_frontalface_default.xml'
	load_file()
	face_cascade = cv.CascadeClassifier(config_file_path)

15. 人脸检测并画人脸框(主要程序)
	faces = face_cascade.detectMultiScale(small_frame,1.1,5,25)
	# 图片里有人脸时
	if len(faces)>0:
	print("有人脸")
	for x, y, w, h in faces:
		# x *= 4
		# y *= 4
		# w *= 4
		# h *= 4
		# 给有人脸的帧画上线框(frameBg为最终显示的图像)
		cv.rectangle(frameBg,(x,y),(x+w,y+h),(0,0,255),2)

16. 缩小检测画面,加快检测速度(缩小时,上面对应xywh*4,有25,否则没有即默认100)
	small_frame = cv.resize(gray, (0, 0), fx=0.25, fy=0.25)

17. 二值化处理图片:(小于阀值210的全变黑色,大于阀值210的全变255即白色)
	threshold,img = cv.threshold(gray,210,255,cv.THRESH_BINARY)

18. sobel边缘检测处理图像:
	x = cv.Sobel(img, cv.CV_16S, 1, 0)
	y = cv.Sobel(img, cv.CV_16S, 0, 1)
	# cv2.convertScaleAbs(src[, dst[, alpha[, beta]]])
	# 可选参数alpha是伸缩系数，beta是加到结果上的一个值，结果返回uint类型的图像
	Scale_absX = cv.convertScaleAbs(x)  # convert 转换  scale 缩放
	Scale_absY = cv.convertScaleAbs(y)
	result = cv.addWeighted(Scale_absX, 0.5, Scale_absY, 0.5, 0)

19. 让画面全屏显示:
	cv.namedWindow('window', cv.WINDOW_NORMAL) #获取窗口名字
	cv.resizeWindow('window', cv.WND_PROP_FULLSCREEN, cv.WINDOW_FULLSCREEN) #画面全屏
	cv.setWindowProperty('window', cv.WND_PROP_FULLSCREEN, cv.WINDOW_FULLSCREEN) #窗口全屏
	cv.imshow('window', frameBg)
