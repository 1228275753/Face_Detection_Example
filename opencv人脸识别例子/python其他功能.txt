1. python调用播放音频
# 该文件名字为mp3.py
import sys
from playsound import playsound
sound = playsound(sys.argv[1])
print(sound)

# 需要pip install playsound
# 直接运行这个文件,需要:python mp3.py audio_1.mp3
# 如果在另一个python调用的话:
# soundPlay = subprocess.Popen(["python","mp3.py","audio_1.mp3"])
# 关闭播放的音频
# soundPlay.terminate()

2. 大小不同的两张图片的叠加
    imH = img.shape[0] #获取img的高
    s_h = int(imH / 2) #定义一个二维码的宽高
    img2 = cv.imread('qrcode.jpg') #获取二维码
    img2 = cv.resize(img2,(s_h,s_h)) #设置二维码尺寸
    img[0:s_h, 0:s_h] = img2
    codeImgPath = 'imgs/code.jpg' #有二维码和人的图片
    cv.imwrite(codeImgPath,img)

3. 按规定大小给图片等比例缩小,多余的剪切掉,并输出
# 修改相片大小
def capture_and_resize_image():
    infile = imgPath #读取照片的位置及其名字
    outfile = 'imgs/outImg.jpg' #修改后照片储存位置和名字
    pic = cv.imread(infile)
    h = pic.shape[0] #照片的高
    w = pic.shape[1] #照片的宽
    s_h = 2160 #标准的高
    s_w = w * s_h / h #标准的宽
    dis_w = s_w - 2880 #多余的宽的长度
    half_dis_w = dis_w / 2
    img = cv.resize(pic,(int(s_w),int(s_h))) #缩小后的图片
    s_img = img[0:int(s_h), int(half_dis_w):int(half_dis_w + 2880)] #完成切割后的标准图片
    cv.imwrite(outfile,s_img) #输出新照片保存

4. 图形矩阵行列转置
	frame1 = frame1.transpose(1,0,2) #对图形矩阵的行列进行转置

5. 图形矩阵上下翻转
	frame1 = frame1[::-1] #对图形矩阵进行上下翻转

6. 图形矩阵旋转
	frame1 = np.rot90(frame1, 1) #逆时针90度
	frame1 = np.rot90(frame1, -1) #顺时针90度
	frame1 = np.rot90(frame1, 2) #逆时针180度
	frame1 = np.rot90(frame1, 3) #逆时针270度

7. 将多个图像集合在一行里,在一个窗口显示(每个图像大小要一致,并最好结合全屏窗口一起使用,否则每张图像都显示原图大小)
	frames = np.hstack([frame1,frame2,frame3])
	(hastack: 水平叠加；vstack:垂直叠加)
(另附全屏代码:
    cv.namedWindow('imgWindow', cv.WINDOW_NORMAL) #获取窗口名字
    cv.resizeWindow('imgWindow', cv.WND_PROP_FULLSCREEN, cv.WINDOW_FULLSCREEN)
    cv.setWindowProperty('imgWindow', cv.WND_PROP_FULLSCREEN, cv.WINDOW_FULLSCREEN)

8. numpy板块
	* 一般情况下,图片矩阵默认类型为 unit8 ;
	* 查看矩阵数据类型: arr.dtype
	* 比如arr为float64类型矩阵,将它转化为unit8:
		np.uint8(arr)
	* 创建一个0矩阵:(10行20列,每组3个数字；同理,1矩阵为"np.ones")
		np.zeros(shape = (10, 20, 3))
	* 创建一个255矩阵(1矩阵*255)
		np.ones(shape = (10, 20, 3)) * 255

9. 自定义一块区域用来写文字
    # # 创建中白条,用于写字
    noneCen = np.ones(shape = (500, 8640, 3))
    noneCen = np.uint8(noneCen * 255) #把类型转为与图片一致的unit8类型
    # 写字
    img_PIL = Image.fromarray(cv.cvtColor(noneCen, cv.COLOR_BGR2RGB))
    font = ImageFont.truetype('NotoSansCJK-Black.ttc', 100) #文字字体和大小
    fillColor = (255, 0, 0) #文字颜色
    position = (100, 100) #文字位置
    strTxt = "请扫描二维码"
	strTxt = strTxt.decode('utf8')
    draw = ImageDraw.Draw(img_PIL)
    draw.text(position, strTxt, font=font, fill=fillColor)
    txtImg = cv.cvtColor(np.asarray(img_PIL), cv.COLOR_RGB2BGR)

10. 获取api图片
    # 用数组把每组图片装起来
    global imgList, ewmList
    imgList = []
    ewmList = []
    allImg = requests.get("https://iva.siiva.com/admin/task/list?project_id=pr_1539766931&limit=6&state=complete")
    for i in range(0, 6):
        activity_id = json.loads(allImg.text).get('list')[i].get('activity_id')
        taskId = json.loads(allImg.text).get('list')[i].get('task').get('taskId')
        # 拼接图片
        imgName = 'https://siiva-video-public.oss-cn-hangzhou.aliyuncs.com/' + activity_id + '/' + taskId + '_display.jpg'
        imgList.append(imgName)
        # 拼接二维码
        ewmName = 'https://siiva-video.oss-cn-hangzhou.aliyuncs.com/qrcode/' + taskId + '.png'
        ewmList.append(ewmName)

11. python子线程实现定时器
	def heart_beat():
		print time.strftime('%Y-%m-%d %H:%M:%S')

		global exec_count
		exec_count += 1
		# 15秒后停止定时器
		if exec_count < 15:
		    threading.Timer(1, heart_beat).start()
	
